1.MySQL优化
	a.查询
		查询语句关键字(WHERE、JOIN、LIMIT、GROUP BY、HAVING)执行先后顺序
			查询中用到的关键字主要包含六个, 顺序依次为SELECT -- FROM -- WHERE -- GROUP BY -- HAVING -- ORDER BY
	b.MySQL慢查询
		MySQL的慢查询，全名是慢查询日志，是MySQL提供的一种日志记录，用来记录在MySQL中响应时间超过阀值的语句。数据库调优时使用。
		slow_query_log慢查询开启状态
		slow_query_log_file 慢查询日志存放的位置
		long_query_time 查询超过多少秒才记录
		
2.索引
	定义
		数据库满足特定查找算法的数据结构。这些数据结构以某种方式引用数据, 从而在上面实现高级查找算法。常用的实现是B树、B+树、hash
	作用、优缺点
		优点：协助快速查询、更新数据库表中的数据
				创建唯一性索引, 可以保证数据库表中每行数据的唯一性
				加速表和表之间的连接, 特别在实现数据的参考完整性方面有很大意义
		代价：存储空间的代价、创建索引与维护索引的代价
	索引使用
		应该创建索引的地方：唯一、不为空、经常被查询
			经常需要搜索的列上
			作为主键的列上, 强制该列的唯一性和组织表中数据的排列结构
			在经常用在连接的列上,主要是外键
			经常用在WHERE子句中的列上
			经常需要排序的列上
			需要范围搜索的列上
		不应该创建索引的地方：
			很少使用或参考的列
			只有很少数据值或很大数据值的列
			修改性能远远大于检索性能的列
	MySQL B++ Tree索引和HASH索引的区别
	B树和B+树的区别
	聚集索引和非聚集索引的区别：聚集索引和非聚集索引的根本区别是表记录的排列顺序和与索引的排列顺序是否一致。
		聚集索引表记录的排列顺序和索引的排列顺序一致，所以查询效率快
		非聚集索引指定了表中记录的逻辑顺序，但是记录的物理和索引不一定一致
			
3.数据库锁
	MySQL中的数据库锁, MySQL中有三种锁的级别
		• 表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。
		• 行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。
		• 页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般
	死锁
		概念：两个或两个以上进程在执行过程中, 因资源争夺而照成的一中互相等待的现象。若无外力作用, 都将无法推进下去。
		表级锁不会产生死锁.所以解决死锁主要还是针对于最常用的InnoDB。
		解决办法：i.查出进程杀死
					ii.设置所的超时时间, InnoDB行锁的等待时间, 可在会话级别设置 innodb_lock_timeout
					iii.指定获取锁的顺序,有序加锁
	有哪些锁
		悲观锁
			特点：先获取锁, 在进行业务操作
			即悲观的认为获取锁是有可能失败的,因此要先确保获取锁成功再进行业务操作。
			在数据库上的悲观锁需要数据库本身提供支持，即通过常用的select … for update操作来实现悲观锁。select for update获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。
		乐观锁
			先进行业务操作,不到万不得已不去拿锁。即“乐观”的认为拿锁多半是会成功的，因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好。
			也叫乐观并发控制,假设多用户并发的事务在处理时不会彼此互相影响, 各事务能够在不产生锁的情况下处理各自影响的那部分数据。。
			在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，那么当前正在提交的事务会进行回滚。
		使用场景
			• 响应速度： 如果需要非常高的响应速度，建议采用乐观锁方案，成功就执行，不成功就失败，不需要等待其他并发去释放锁。'
			• 冲突频率： 如果冲突频率非常高，建议采用悲观锁，保证成功率，如果冲突频率大，乐观锁会需要多次重试才能成功，代价比较大。
			• 重试代价： 如果重试代价大，建议采用悲观锁。

4.mysql 高并发环境解决方案
		MySQL 高并发环境解决方案： 分库 分表 分布式 增加二级缓存。。。。。
		需求分析：互联网单位 每天大量数据读取，写入，并发性高。
		现有解决方式：水平分库分表，由单点分布到多点数据库中，从而降低单点数据库压力。
		集群方案：解决DB宕机带来的单点DB不能访问问题。
		读写分离策略：极大限度提高了应用中Read数据的速度和并发量。无法解决高写入压力。

5.数据库奔溃时事务的恢复机制(REDO日志和UNDO日志)
	Undo Log:
		Undo Log是为了实现事务的原子性，在MySQL数据库InnoDB存储引擎中，还用了Undo Log来实现多版本并发控制(简称：MVCC)。
	Redo Log
6.MySQL的MVCC机制
	MVCC是一种多版本并发控制机制，是MySQL的InnoDB存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。MVCC是通过保存数据在某个时间点的快照来实现该机制，其在每行记录后面保存两个隐藏的列，分别保存这个行的创建版本号和删除版本号，然后Innodb的MVCC使用到的快照存储在Undo日志中，该日志通过回滚指针把一个数据行所有快照连接起来。